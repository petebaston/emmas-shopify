{% comment %}
{% assign foodtype = false %}
       
{%- for line_item in cart.items -%}
{% assign fooditemweightfinal = 0 %}
{% if line_item.product.tags contains "Food Products" %}
{% assign fooditemweight = fooditemweight | plus: line_item.grams %}
{% assign fooditemweightfinal = fooditemweight | times : line_item.quantity  %}

{% assign foodtype = true %}
{{ fooditemweightfinal | weight_with_unit  }}<br>
       {% endif %}
{%- endfor -%}
{% endcomment %}

{% stylesheet %}

.me-1em{
  margin-block-end: 1em;
}
.error-text{
  color: red !important;
}
.display-none{
  display: none !important;
}
.exat-attribute{
    display: block;
}
.exat-attribute .din-att-con{
   display: flex;
}
.exat-attribute .din-att-con button{
    background: #292e43;
    color: white;
    padding: 0 10px;
}
.exat-attribute label{
    display: block;
    text-transform: none !important;
    font-weight: var(--text-font-bolder-weight);
    color: var(--heading-color);
}
.exat-attribute input[type="radio"],.exat-attribute input[type="checkbox"]{
    min-width: auto !important;
    margin-right: 3px;
}
.exat-attribute.cart-attribute__field input[type="text"], .exat-attribute.cart-attribute__field select, .exat-attribute.cart-attribute__field textarea{
    width:100%;
  	border: 1px solid #dddfe0;
    padding: 3px;
}
.exat-attribute input.error, .exat-attribute select.error, .exat-attribute textarea.error {
    border: 1px dotted red;
}
.exat-attribute .block {
	display: block;
}
.exat-attribute label.error {
   display: none;
  	color: red;
}
.exat-attribute .exat-datepicker{
    background-image: url(https://customized-attribute.pifyapp.com/assets/images/date.png);
    background-repeat: no-repeat;
    background-position: right;
    background-size: contain;
}
. cart-heading-lg-0 {
  line-height: 0; 
}
.exat-rich-text{
	margin: 0 0 20px;
}
.exat-rich-text ol{
	margin:0 !important;
}
.exat-rich-text p{
	margin: 0 0 8px !important;
  	line-height: 150%;
}
.exat-attribute .option-item-block{
    display:inline;margin-right:10px;
}
@media screen and (max-width: 500px) {
    .exat-attribute .option-item-block{
        display:block;
      	margin: 10px;
    }
  .exat-attribute.cart-attribute__field input[type="text"], .exat-attribute.cart-attribute__field select, .exat-attribute.cart-attribute__field textarea{
    width:100%;
	}
}
.exat-term-attribute{
    width: 100%;
}

.exat-attributes-wrap{
  margin-top: 15px;
    border-top: 1px solid #e5e1e1;
    padding-top: 10px;
}
.din-error{
  display:block !important;
}

.subs_control .button {
  width: 250px;
}

@media screen and (max-width: 999px) {
    .subs_control {
      padding-bottom:30px;
    }
}

@media screen and (max-width: 640px) {
    .subs_control {
      margin: 0 20px;
    }

    .subs_control button.button {
      width: 100%;
      margin-bottom: 10px;
    }
}

{% endstylesheet %}


{%- capture section_settings -%}
{
  "showShippingEstimator": {% if cart.item_count == 0 %}false{% else %}{{ section.settings.show_shipping_estimator | json }}{% endif %}
}
{%- endcapture -%}

<section data-section-id="{{ section.id }}" data-section-type="cart" data-section-settings='{{ section_settings }}' data-item-count="{{ cart.item_count }}">
  {%- if cart.item_count == 0 -%}
    <div class="container">
      <div class="empty-state">
        <div class="empty-state__icon">
          {%- render 'icon', icon: 'big-cart' -%}
        </div>

        <p class="empty-state__heading heading h1">{{ 'cart.general.empty' | t }}</p>

        {%- if settings.cart_show_free_shipping_threshold -%}
          {%- assign threshold_in_cents = settings.cart_free_shipping_threshold | times: 100 -%}
          {%- capture remaining_amount -%}<span>{{ cart.total_price | minus: threshold_in_cents | abs | money }}</span>{%- endcapture -%}
          <p class="empty-state__description">{{ 'cart.general.free_shipping_remaining_html' | t: remaining_amount: remaining_amount }}</p>
        {%- endif -%}

        <div class="empty-state__button-container">
          <a href="{{ settings.cart_empty_button_link | default: routes.root_url }}" class="empty-state__button button button--primary">{{ 'cart.general.empty_button' | t }}</a>
        </div>
      </div>
    </div>
  {%- else -%}
    <div class="container">
      <header class="page__header page__header--stack">
        <h1 id="din_name" class="page__title heading h1 cart-heading-lg-0">{{ 'cart.general.title' | t }}</h1>

        {%- if settings.cart_show_free_shipping_threshold -%}
          {%- assign threshold_in_cents = settings.cart_free_shipping_threshold | times: 100 -%}

          {%- if cart.total_price >= threshold_in_cents -%}
            <p class="page__description">{{ 'cart.general.free_shipping' | t }}</p>
          {%- else -%}
            {%- capture remaining_amount -%}<span>{{ cart.total_price | minus: threshold_in_cents | abs | money }}</span>{%- endcapture -%}
            <p class="page__description">{{ 'cart.general.free_shipping_remaining_html' | t: remaining_amount: remaining_amount }}</p>
          {%- endif -%}
        {%- endif -%}
      </header>
    </div>

    <div class="cart-wrapper">
      <div class="cart-wrapper__inner">
        <div class="cart-wrapper__inner-inner">
          <div class="container container--flush">
            {%- comment -%}
            --------------------------------------------------------------------------------------
            LINE ITEMS
            --------------------------------------------------------------------------------------
            {%- endcomment -%}

            <div class="card">
              <div class="table-wrapper">
                <table class="line-item-table table table--loose">
                  <thead class="hidden-phone">
                    <tr>
                      <th>{{ 'customer.order.product' | t }}</th>
                      <th class="table__cell--center">{{ 'customer.order.quantity' | t }}</th>
                      <th class="table__cell--right">{{ 'customer.order.total' | t }}</th>
                    </tr>
                  </thead>

                  <tbody>
                    {%- assign gift_wrap_product = section.settings.gift_wrap_product -%}

                    {%- for line_item in cart.items -%}
                      {% assign line_item_forloop = forloop %}
                      <tr class="line-item line-item--stack">
                        <td class="line-item__product-info">
                          <div class="line-item__product-info-wrapper">
                            <div class="line-item__image-wrapper">
                              {%- comment -%}For vertical images we force to contain them on a square ratio to avoid growing too large{%- endcomment -%}

                              {%- if line_item.image.aspect_ratio < 1 -%}
                                <div class="aspect-ratio aspect-ratio--square">
                                  <img src="{{ line_item.image | img_url: '180x' }}" alt="{{ line_item.image.alt | escape }}">
                                </div>
                              {%- else -%}
                                <div class="aspect-ratio" style="padding-bottom: {{ 100.0 | divided_by: line_item.image.aspect_ratio }}%">
                                  <img src="{{ line_item.image | img_url: '180x' }}" alt="{{ line_item.image.alt | escape }}">
                                </div>
                              {%- endif -%}
                            </div>

                            <div class="line-item__meta">
                              {%- if settings.show_vendor and gift_wrap_product.handle != line_item.product.handle -%}
                                {%- assign vendor_handle = line_item.product.vendor | handle -%}
                                {%- assign collection_for_vendor = collections[vendor_handle] -%}

                                {%- unless collection_for_vendor.empty? -%}
                                  <a class="line-item__vendor link" href="{{ collection_for_vendor.url }}">{{ line_item.product.vendor }}</a>
                                  {%- else -%}
                                  <a class="line-item__vendor link" href="{{ line_item.product.vendor | url_for_vendor }}">{{ line_item.product.vendor }}</a>
                                {%- endunless -%}
                              {%- endif -%}

                              {%- if gift_wrap_product.handle == line_item.product.handle -%}
                                <span class="line-item__title text--strong">{{ line_item.title }}</span>
                              {%- else -%}
                                <a href="{{ line_item.url }}" class="line-item__title link text--strong">{{ line_item.title }}</a>
                              {%- endif -%}

                              {%- if line_item.selling_plan_allocation -%}
                                <p class="line-item__plan-allocation">{{ line_item.selling_plan_allocation.selling_plan.name }}</p>
                              {%- endif -%}

                              <div class="line-item__price-list">
                                {%- if line_item.original_price > line_item.final_price -%}
                                  {%- if line_item.final_price == 0 -%}
                                    <span class="line-item__price line-item__price--highlight">{{ 'cart.general.free' | t }}</span>
                                  {%- else -%}
                                    <span class="line-item__price line-item__price--highlight">{{ line_item.final_price | money }}</span>
                                  {%- endif -%}

                                  <span class="line-item__price line-item__price--compare">{{ line_item.original_price | money }}</span>
                                {%- elsif line_item.variant.compare_at_price > line_item.variant.price -%}
                                  {%- if line_item.final_price == 0 -%}
                                    <span class="line-item__price line-item__price--highlight">{{ 'cart.general.free' | t }}</span>
                                  {%- else -%}
                                    <span class="line-item__price line-item__price--highlight">{{ line_item.final_price | money }}</span>
                                  {%- endif -%}

                                  <span class="line-item__price line-item__price--compare">{{ line_item.variant.compare_at_price | money }}</span>
                                {%- else -%}
                                  {%- if line_item.final_price == 0 -%}
                                    <span class="line-item__price">{{ 'cart.general.free' | t }}</span>
                                  {%- else -%}
                                    <span class="line-item__price">{{ line_item.final_price | money }}</span>
                                  {%- endif -%}
                                {%- endif -%}            
                                {% assign line_item_original = line_item_weight %}
                                {% assign gramsInOunce = 28.3495 %}
                                {% assign ouncesInPound = 16 %}
                                {% assign wholeOunces = line_item.grams | divided_by: gramsInOunce | ceil %}
                                {% assign outputPounds = wholeOunces | divided_by: ouncesInPound | floor %}
                                {% assign outputOunces = wholeOunces | modulo: ouncesInPound %}
                              </div>
                              <div class="item-sku">
                                Sku: {{line_item.sku}}
                              </div> 
                              <div class="item-sku">
                                Weight: {{ outputPounds | append: " lbs " | append: outputOunces | append: " oz" }}
                              </div>
                              {%- if line_item.unit_price_measurement -%}
                                <div class="line-item__price-info">
                                  <div class="unit-price-measurement">
                                    <span class="unit-price-measurement__price">{{ line_item.unit_price | money }}</span>
                                    <span class="unit-price-measurement__separator">/ </span>

                                    {%- if line_item.unit_price_measurement.reference_value != 1 -%}
                                      <span class="unit-price-measurement__reference-value">{{ line_item.unit_price_measurement.reference_value }}</span>
                                    {%- endif -%}

                                    <span class="unit-price-measurement__reference-unit">{{ line_item.unit_price_measurement.reference_unit }}</span>
                                  </div>
                                </div>
                              {%- endif -%}

                              {%- if line_item.line_level_discount_allocations != blank -%}
                                <ul class="line-item__discount-list" role="list">
                                  {%- for discount_allocation in line_item.line_level_discount_allocations -%}
                                    <li class="line-item__discount">
                                      {%- render 'icon', icon: 'sale' -%}{{ discount_allocation.discount_application.title }} (-{{ discount_allocation.amount | money }})
                                    </li>
                                  {%- endfor -%}
                                </ul>
                              {%- endif -%}

                              <div class="line-item__quantity hidden-tablet-and-up">
                                {%- comment -%}If the product has the tag "__gift", we remove the price{%- endcomment -%}

                                {%- unless line_item.product.tags contains '__gift' -%}
                                  <div class="quantity-selector">
                                    {%- assign allow_to_add_more = true -%}

                                    {%- if line_item.variant.inventory_management and line_item.variant.inventory_policy == 'deny' and line_item.quantity == line_item.variant.inventory_quantity -%}
                                      {%- assign allow_to_add_more = false -%}
                                    {%- endif -%}

                                    <button type="button" class="quantity-selector__button" data-action="decrease-quantity" data-href="{{ routes.cart_change_url }}?quantity={{ line_item.quantity | minus: 1 }}&line={{ forloop.index }}" data-quantity="{{ line_item.quantity | minus: 1 }}" data-line="{{ forloop.index }}" aria-label="{{ 'cart.items.decrease_quantity' | t }}" title="{{ 'cart.items.decrease_quantity' | t }}">{% render 'icon', icon: 'minus' %}</button>
                                    <input aria-label="{{ 'product.form.quantity' | t }}" class="quantity-selector__value" inputmode="numeric" data-current-value="{{ line_item.quantity }}" data-line="{{ forloop.index }}" value="{{ line_item.quantity }}" size="{{ line_item.quantity | append: '' | size | at_least: 2 }}">
                                    <button type="button" class="quantity-selector__button" data-action="increase-quantity" data-href="{{ routes.cart_change_url }}?quantity={{ line_item.quantity | plus: 1 }}&line={{ forloop.index }}" data-quantity="{{ line_item.quantity | plus: 1 }}" data-line="{{ forloop.index }}" {% if allow_to_add_more %}aria-label="{{ 'cart.items.increase_quantity' | t }}" title="{{ 'cart.items.increase_quantity' | t }}"{% else %}disabled="disabled" aria-label="{{ 'cart.items.no_more_stock' | t }}" data-tooltip="{{ 'cart.items.no_more_stock' | t }}" data-tooltip-position="bottom-left"{% endif %}>{% render 'icon', icon: 'plus' %}</button>
                                  </div>
                                {%- else -%}
                                  <span>{{ line_item.quantity }}</span>
                                {% endunless -%}
                                <a href="{{ routes.cart_change_url }}?quantity=0&line={{ forloop.index }}" data-action="decrease-quantity" data-quantity="0" data-line="{{ forloop.index }}" class="line-item__quantity-remove link">{{ 'cart.items.remove' | t }}</a>
                              </div>
                              {%- unless line_item.properties == blank -%}
                                <ul class="line-item__property-list" role="list">
                                  {%- for property in line_item.properties -%}
                                    {%- assign first_character_in_key = property.first | truncate: 1, '' -%}

                                    {%- if property.last == blank or first_character_in_key == '_' -%}
                                      {%- continue -%}
                                    {%- endif -%}
                                    {%- if property.first == 'Allow Substitutions' -%}
                                      {%liquid
                                        assign substitutions_allowed = false
                                        if property.last == 'Yes'
                                          assign substitutions_allowed = true
                                        endif
                                      %}
                                      <li class="line-item__property">
                                        <input 
                                          class="allow_substitutions" 
                                          type="checkbox" 
                                          {% if substitutions_allowed %}
                                            value="Yes" checked 
                                          {% else %} 
                                            value="No"
                                          {% endif %} 
                                          data-key={{ line_item.key }}
                                          data-line={{ line_item_forloop.index }}
                                          >
                                          {{ property.first }}
                                      </li>
                                    {% else %}
                                      <li class="line-item__property">{{ property.first }}: {{ property.last }}</li>
                                    {% endif %}
                                  {%- endfor -%}
                                </ul>
                            {%- endunless -%}
                            </div>
                          </div>
                        </td>

                        <td class="line-item__quantity table__cell--center hidden-phone">
                          {%- comment -%}If the product has the tag "__gift", we remove the price{%- endcomment -%}

                          {%- unless line_item.product.tags contains '__gift' -%}
                            <div class="quantity-selector">
                              {%- assign allow_to_add_more = true -%}

                              {%- if line_item.variant.inventory_management and line_item.variant.inventory_policy == 'deny' and line_item.quantity == line_item.variant.inventory_quantity -%}
                                {%- assign allow_to_add_more = false -%}
                              {%- endif -%}

                              <button type="button" class="quantity-selector__button" data-action="decrease-quantity" data-href="{{ routes.cart_change_url }}?quantity={{ line_item.quantity | minus: 1 }}&line={{ forloop.index }}" data-quantity="{{ line_item.quantity | minus: 1 }}" data-line="{{ forloop.index }}" aria-label="{{ 'cart.items.decrease_quantity' | t }}" title="{{ 'cart.items.decrease_quantity' | t }}">{% render 'icon', icon: 'minus' %}</button>
                              <input aria-label="{{ 'product.form.quantity' | t }}" class="quantity-selector__value" inputmode="numeric" data-current-value="{{ line_item.quantity }}" data-line="{{ forloop.index }}" value="{{ line_item.quantity }}" size="{{ line_item.quantity | append: '' | size | at_least: 2 }}">
                              <button type="button" class="quantity-selector__button" data-action="increase-quantity" data-href="{{ routes.cart_change_url }}?quantity={{ line_item.quantity | plus: 1 }}&line={{ forloop.index }}" data-quantity="{{ line_item.quantity | plus: 1 }}" data-line="{{ forloop.index }}" {% if allow_to_add_more %}aria-label="{{ 'cart.items.increase_quantity' | t }}" title="{{ 'cart.items.increase_quantity' | t }}"{% else %}disabled="disabled" aria-label="{{ 'cart.items.no_more_stock' | t }}" data-tooltip="{{ 'cart.items.no_more_stock' | t }}" data-tooltip-position="bottom-left"{% endif %}>{% render 'icon', icon: 'plus' %}</button>
                            </div>
                          {%- else -%}
                            <span>{{ line_item.quantity }}</span>
                          {%- endunless -%}

                          <a href="{{ routes.cart_change_url }}?quantity=0&line={{ forloop.index }}" data-action="decrease-quantity" data-quantity="0" data-line="{{ forloop.index }}" class="line-item__quantity-remove link">{{ 'cart.items.remove' | t }}</a>
                        </td>

                        <td class="line-item__line-price table__cell--right hidden-phone">
                          {%- if line_item.final_line_price == 0 -%}
                            {{- 'cart.general.free' | t -}}
                          {%- else -%}
                            <span>{{ line_item.final_line_price | money }}</span>
                          {%- endif -%}
                        </td>
                      </tr>
                    {%- endfor -%}
                  </tbody>
                </table>
              </div>
            </div>
            <div class="subs_control">
              <h3 class="heading h3">Substitution preferences</h2>
              <button id="allow_all" class="button button--primary">Allow all substitutions</button>
              <button id="disallow_all" class="button button--primary">Disallow all substitutions</button>
            </div>

            {%- comment -%}
            --------------------------------------------------------------------------------------
            GIFT WRAP
            --------------------------------------------------------------------------------------
            {%- endcomment -%}

            {%- assign gift_wrap_product = section.settings.gift_wrap_product -%}

            {%- unless gift_wrap_product == blank or gift_wrap_product.available == false -%}
              {%- comment -%}We also have to do another check to make sure the gift wrap product is not already in the cart{%- endcomment -%}

              {%- assign gift_wrap_in_cart = false -%}

              {%- for line_item in cart.items -%}
                {%- if line_item.product_id == gift_wrap_product.id -%}
                  {%- assign gift_wrap_in_cart = true -%}
                  {%- break -%}
                {%- endif -%}
              {%- endfor -%}

              {%- unless gift_wrap_in_cart -%}
                <div class="card">
                  <div class="gift-wrap">
                    <div class="gift-wrap__left">
                      <span class="gift-wrap__icon">{% render 'icon', icon: 'bi-gift-wrap' %}</span>

                      <p class="gift-wrap__text">
                        <span class="text--strong">{{ section.settings.gift_wrap_text | escape }}</span>

                        {%- if gift_wrap_product.price == 0 -%}
                          <span>{{ 'cart.general.free' | t }}</span>
                        {%- else -%}
                          {%- capture gift_wrap_product_price -%}<span>{{ gift_wrap_product.price | money }}</span>{%- endcapture -%}
                          <span>{{ 'cart.gift_wrap.price_html' | t: price: gift_wrap_product_price }}</span>
                        {%- endif -%}
                      </p>
                    </div>

                    {%- form 'product', gift_wrap_product, class: 'gift-wrap__form' -%}
                      <input type="hidden" name="quantity" value="1">
                      <input type="hidden" name="id" data-sku="{{ gift_wrap_product.first_available_variant.sku }}" value="{{ gift_wrap_product.first_available_variant.id }}">

                      <button type="submit" class="button button--secondary" data-action="add-to-cart">{{ section.settings.gift_wrap_button | escape }}</button>
                    {%- endform -%}
                  </div>
                </div>
              {%- endunless -%}
            {%- endunless -%}

            {%- comment -%}
            --------------------------------------------------------------------------------------
            SHIPPING ESTIMATOR
            --------------------------------------------------------------------------------------
            {%- endcomment -%}

            {%- if section.settings.show_shipping_estimator -%}
              <div class="card">
                <div class="estimate-shipping">
                  <button type="button" class="estimate-shipping__toggle" data-action="toggle-collapsible" data-collapsible-force-overflow aria-expanded="false" aria-controls="shipping-estimator">
                    <span class="estimate-shipping__icon">{% render 'icon', icon: 'bi-fast-delivery' %}</span>
                    <span class="estimate-shipping__text">{{ 'cart.shipping_estimator.title' | t }}</span>
                    <span class="estimate-shipping__arrow">{% render 'icon', icon: 'arrow-bottom' %}</span>
                  </button>

                  <div id="shipping-estimator" class="estimate-shipping__collapsible collapsible">
                    <div class="shipping-estimator form" role="form">
                      <div class="form__input-row">
                        <div class="form__input-wrapper">
                          <label for="shipping-estimator-country" class="form__label form__label--light">{{ 'cart.shipping_estimator.country' | t }}</label>

                          <div class="select-wrapper select-wrapper--primary">
                            {%- render 'icon', icon: 'arrow-bottom' -%}

                            <select name="country" id="shipping-estimator-country" data-default="{{ customer.default_address.country | default: section.settings.shipping_estimator_default_country }}" required>
                              {{- country_option_tags -}}
                            </select>
                          </div>
                        </div>

                        <div class="form__input-wrapper" style="display: none">
                          <label for="shipping-estimator-province" class="form__label form__label--light">{{ 'cart.shipping_estimator.province' | t }}</label>

                          <div class="select-wrapper select-wrapper--primary">
                            {%- render 'icon', icon: 'arrow-bottom' -%}

                            <select name="province" id="shipping-estimator-province" data-default="{{ customer.default_address.province }}"></select>
                          </div>
                        </div>

                        <div class="form__input-wrapper" style="max-width: 155px">
                          <label for="shipping-estimator-zip" class="form__label form__label--light">{{ 'cart.shipping_estimator.zip_code' | t }}</label>
                          <input type="text" name="zip" id="shipping-estimator-zip" class="form__field form__field--text" value="{{ customer.default.address.zip }}" required>
                        </div>

                        <div class="form__input-wrapper hidden-phone">
                          <button type="button" class="form__submit button button--secondary" data-action="estimate-shipping">{{ 'cart.shipping_estimator.estimate' | t }}</button>
                        </div>
                      </div>

                      <button type="button" class="form__submit button button--secondary hidden-tablet-and-up" data-action="estimate-shipping">{{ 'cart.shipping_estimator.estimate' | t }}</button>

                      <div class="shipping-estimator__results" style="display: none;"></div>
                    </div>
                  </div>
                </div>
              </div>
            {%- endif -%}

            {%- comment -%}
            --------------------------------------------------------------------------------------
            RECAP
            --------------------------------------------------------------------------------------
            {%- endcomment -%}

            <form id="cart_submit_form" class="cart-recap" method="post" action="{{ routes.cart_url }}"  data-item-count="{{ cart.item_count }}">
              <div class="cart-recap__scroller">
                <div class="card">
                  <div class="card__section">
                    {%- if cart.cart_level_discount_applications != blank -%}
                      {%- for discount_application in cart.cart_level_discount_applications -%}
                        <div class="cart-recap__price-line cart-recap__price-line--highlight text--pull">
                          <span class="cart-recap__price-line-label">{{ discount_application.title }}</span>
                          <span class="cart-recap__price-line-price">-{{ discount_application.total_allocated_amount | money }}</span>
                        </div>
                      {%- endfor -%}
                    {%- endif -%}
{% assign cart_total_weight = cart.total_weight %}
{% assign gramsInOunce = 28.3495 %}
{% assign ouncesInPound = 16 %}
{% assign wholeOunces = cart_total_weight | divided_by: gramsInOunce | ceil %}
{% assign outputPounds = wholeOunces | divided_by: ouncesInPound | floor %}
{% assign outputOunces = wholeOunces | modulo: ouncesInPound %}
                    <div class="cart-recap__price-line text--pull">
                      <span class="cart-recap__price-line-label">{{ 'cart.general.total' | t }}</span>
                      <span class="cart-recap__price-line-price">{{ cart.total_price | money_with_currency }}</span>
                    </div>
                    <div class="cart-recap__price-line text--pull">
                      <span class="cart-recap__price-line-label">Total Package Weight:</span>
                      <span class="cart-recap__price-line-price">{{ outputPounds | append: " lbs " | append: outputOunces | append: " oz" }}
</span>
                    </div>
                    {%- comment -%}
                    To calculate the total discount, we take into account the Shopify Script (for Plus merchants), but we also add the compare at price as
                    well as potential automatic discounts at cart level
                    {%- endcomment -%}

                    {%- assign total_discount = 0 -%}
                    <!-- for food product weight notification --> 

                    {% assign fooditemweightfinal = 0 %}
                    {% assign finalweightnotification = 0 %}
                    {% assign finalweightnotificationfinal = 0 %}
                    <!-- for food product weight notification --> 

                    {%- for line_item in cart.items -%}
                    <!-- for food product weight notification --> 
                    {% if line_item.product.tags contains "Food Products" %}
                    {% assign fooditemweightfinal = line_item.grams | times : line_item.quantity  %}

                    {% assign finalweightnotification =  fooditemweightfinal | divided_by: 453.592    %}
                    {% assign  finalweightnotificationfinal = finalweightnotificationfinal | plus : finalweightnotification %}
                    {% endif %}
                    <!-- for food product weight notification --> 

                      {%- if line_item.final_line_price < line_item.original_line_price -%}
                        {%- assign total_discount = total_discount | plus: line_item.total_discount -%}
                      {%- elsif line_item.variant.compare_at_price > line_item.variant.price -%}
                        {%- assign line_discount = line_item.variant.compare_at_price | minus: line_item.variant.price | times: line_item.quantity -%}
                        {%- assign total_discount = total_discount | plus: line_discount -%}
                      {%- endif -%}
                    {%- endfor -%}
                    <!-- for food product weight notification --> 
                    {% if finalweightnotificationfinal > 40 %}
                    <p class="limittextcart">Please review the FOOD items selected to NOT exceed 40lbs. NYSDOCCS does not allow over 40lbs of FOOD ITEMS per month (NON-FOOD items do NOT count towards this limit)</p><br>
                    {% endif %}
                    <!-- for food product weight notification --> 

                    {%- for discount_application in cart.cart_level_discount_applications -%}
                      {%- assign total_discount = total_discount | plus: discount_application.total_allocated_amount -%}
                    {%- endfor -%}

                    {%- if total_discount > 0 -%}
                      {%- capture amount_saved -%}<span>{{ total_discount | money }}</span>{%- endcapture -%}
                      <span class="cart-recap__amount-saved">{{ 'cart.general.amount_saved_html' | t: amount_saved: amount_saved }}</span>
                    {%- endif -%}
                    {% render 'cart-attributes.liquid' %}
                    {% comment %} <div class="exat-attributes-wrap">{% include 'exat-cart-attribute' %}</div> {% endcomment %}
                    
                    {%- if section.settings.enable_order_notes -%}
                      <div class="cart-recap__note">
                        <button type="button" class="cart-recap__note-button" data-action="toggle-collapsible" data-collapsible-force-overflow aria-controls="order-note" aria-expanded="false">
                          {{- 'cart.general.note_title' | t -}}
                          <span>
                            <span class="cart-recap__note-edit {% if cart.note != blank %}is-visible{% endif %}">{{ 'cart.general.edit_note' | t }}</span>
                            {%- render 'icon', icon: 'arrow-bottom' -%}
                          </span>
                        </button>

                        <div id="order-note" class="collapsible" aria-hidden="true">
                          <div class="cart-recap__note-inner">
                            <textarea name="note" class="form__field form__field--textarea" rows="3">{{ cart.note }}</textarea>
                            <button type="button" class="form__submit form__submit--tight button button--secondary" data-action="save-note">{{ 'cart.general.save_note' | t }}</button>
                          </div>
                        </div>
                      </div>
                    {%- endif -%}

                    <div class="cart-recap__notices rte">
                      <p>
                        {%- if cart.taxes_included and shop.shipping_policy.body != blank -%}
                          {{ 'cart.general.taxes_included_and_shipping_policy_html' | t: link: shop.shipping_policy.url }}
                        {%- elsif cart.taxes_included -%}
                          {{ 'cart.general.taxes_included_but_shipping_at_checkout' | t }}
                        {%- elsif shop.shipping_policy.body != blank -%}
                          {{ 'cart.general.taxes_and_shipping_policy_at_checkout_html' | t: link: shop.shipping_policy.url }}
                        {%- else -%}
                          {{ 'cart.general.taxes_and_shipping_at_checkout' | t }}
                        {%- endif -%}
                      </p>
                    </div>

                    <input type="hidden" name="attributes[collection_products_per_page]" value="">
                    <input type="hidden" name="attributes[collection_layout]" value="">
                    
                    <button type="submit" name="checkout" class="cart-recap__checkout button button--primary button--full button--large">{{ 'cart.general.checkout' | t }}</button>
                  
                  </div>
                </div>

                {%- if section.settings.show_payment_icons -%}
                  <div class="cart-recap__secure-payment">
                    <p class="cart-recap__secure-payment-title">{% render 'icon', icon: 'lock-2' %} {{ 'cart.general.secure_payments' | t }}</p>

                    <div class="cart-recap__secure-payment-list payment-list payment-list--centered">
                      {% for type in shop.enabled_payment_types %}
                        {{ type | payment_type_svg_tag: class: 'payment-list__item' }}
                      {% endfor %}
                    </div>
                  </div>
                {%- endif -%}
              </div>
            </form>
          </div>

          {%- comment -%}
          --------------------------------------------------------------------------------------
          UPSELL
          --------------------------------------------------------------------------------------
          {%- endcomment -%}

          {%- assign upsell_collection = section.settings.upsell_collection -%}

          {%- if section.blocks.size > 0 or upsell_collection != blank -%}
            <div class="container">
              {%- if section.blocks.size > 0 -%}
                <div class="section">
                  <header class="section__header">
                    <h2 class="section__title heading h3">{{ section.settings.trust_heading | escape }}</h2>
                  </header>

                  <div class="text-with-icons text-with-icons--boxed">
                    {%- for block in section.blocks -%}
                      <div class="text-with-icons__item" {{ block.shopify_attributes }}>
                        <div class="text-with-icons__icon-wrapper">
                          {%- if block.settings.custom_icon != blank -%}
                            <img src="{{ block.settings.custom_icon | img_url: '60x' }}" alt="{{ block.settings.custom_icon.alt | escape }}">
                          {%- else -%}
                            {%- render 'icon', icon: block.settings.icon, stroke_width: 1.5 -%}
                          {%- endif -%}
                        </div>

                        {%- if block.settings.title != blank or block.settings.content != blank -%}
                          <div class="text-with-icons__content-wrapper">
                            {%- if block.settings.title != blank -%}
                              <p class="text-with-icons__title text--strong">{{ block.settings.title | escape }}</p>
                            {%- endif -%}

                            {%- if block.settings.content != blank -%}
                              <div class="text-with-icons__content rte">
                                {{ block.settings.content  }}
                              </div>
                            {%- endif -%}
                          </div>
                        {%- endif -%}
                      </div>
                    {%- endfor -%}
                  </div>
                </div>
              {%- endif -%}

              {%- if upsell_collection != empty -%}
                {%- comment -%}We iterate through all the products, by making sure to remove those that are already in the cart{%- endcomment -%}

                {%- capture upsell_products -%}
                  {%- assign upsell_products_count = 0 -%}

                  {%- for product in upsell_collection.products -%}
                    {%- unless product.available -%}
                      {%- continue -%}
                    {%- endunless -%}

                    {%- assign include_product = true -%}

                    {%- for line_item in cart.items -%}
                      {%- if line_item.product_id == product.id -%}
                        {%- assign include_product = false -%}
                        {%- break -%}
                      {%- endif -%}
                    {%- endfor -%}

                    {%- if include_product -%}
                      {%- render 'product-item', product: product, show_add_to_cart: true, grid_classes: '1/3--lap 1/3--desk 1/4--wide' -%}

                      {%- comment -%}Check how much products we have shown and limit{%- endcomment -%}
                      {%- assign upsell_products_count = upsell_products_count | plus: 1 -%}

                      {%- if upsell_products_count >= section.settings.upsell_products_count -%}
                        {%- break -%}
                      {%- endif -%}
                    {%- endif -%}
                  {%- endfor -%}
                {%- endcapture -%}

                {%- if upsell_products != blank -%}
                  {%- capture section_settings -%}
                  {
                    "stackable": false,
                    "layout": "vertical"
                  }
                  {%- endcapture -%}

                  <div class="section" data-section-id="{{ section.id }}-upsell" data-section-type="featured-collection" data-section-settings='{{ section_settings }}'>
                    <header class="section__header">
                      <h2 class="section__title heading h3">{{ section.settings.upsell_heading | escape }}</h2>
                    </header>

                    <div class="scroller">
                      <div class="scroller__inner">
                        <div class="product-list product-list--vertical product-list--scrollable">
                          {{ upsell_products }}
                        </div>
                      </div>
                    </div>
                  </div>

                  {%- comment -%}
                  --------------------------------------------------------------------------------------
                  QUICK VIEW CONTAINER
                  --------------------------------------------------------------------------------------
                  {%- endcomment -%}

                  <div id="modal-quick-view-{{ section.id }}" class="modal" aria-hidden="true">
                    <div class="modal__dialog modal__dialog--stretch" role="dialog">
                      <div class="modal__loader">
                        {%- render 'icon', icon: 'search-loader' -%}
                      </div>

                      <div class="modal__inner"></div>
                    </div>
                  </div>
                {%- endif -%}
              {%- endif -%}
            </div>
          {% endif %}
        </div>
      </div>
    </div>
  {%- endif -%}
</section>

<script>
  document.getElementById('cart_submit_form').addEventListener('submit', function(event) {  
      let dinAttribute = document.getElementById('din_attribute').value;
      console.log('dinAttribute: ', dinAttribute)
      var regex = /^\d{2}[A-Z]\d{4}$/i;
      var inputElement = document.getElementById('din_attribute');

      // Remove any existing error label
      var existingError = document.querySelector('.din-error');
      if (existingError) {
          existingError.remove();
      }
  
      // Test the inputString against the regex
      if (regex.test(dinAttribute)) {
        // The string matches the format
        console.log("The string matches the format.");
        // Additional code for the true case can go here
      } else {
        // The string does not match the format
        console.log("The string does not match the format.");
        
        // Create a new label element
        var errorLabel = document.createElement('label');
        errorLabel.classList.add('error', 'din-error');
        errorLabel.textContent = "The din number format should be 00X0000, like 12A3456.";

        // Insert the error label after the input element
        inputElement.parentNode.insertBefore(errorLabel, inputElement.nextSibling);
        event.preventDefault();
      }
      
  });
</script>

<script>
// Cart Update Queue Manager to prevent race conditions
class CartUpdateQueue {
  constructor() {
    this.queue = [];
    this.processing = false;
    this.pendingUpdates = new Set();
  }

  async add(updateFunction) {
    return new Promise((resolve, reject) => {
      this.queue.push({ updateFunction, resolve, reject });
      this.process();
    });
  }

  async process() {
    if (this.processing || this.queue.length === 0) return;
    
    this.processing = true;
    const { updateFunction, resolve, reject } = this.queue.shift();
    
    try {
      const result = await updateFunction();
      resolve(result);
    } catch (error) {
      reject(error);
    } finally {
      this.processing = false;
      // Process next item in queue
      if (this.queue.length > 0) {
        this.process();
      }
    }
  }

  isPending(lineKey) {
    return this.pendingUpdates.has(lineKey);
  }

  addPending(lineKey) {
    this.pendingUpdates.add(lineKey);
  }

  removePending(lineKey) {
    this.pendingUpdates.delete(lineKey);
  }

  hasPendingUpdates() {
    return this.pendingUpdates.size > 0 || this.queue.length > 0 || this.processing;
  }
}

// Initialize queue globally
const cartUpdateQueue = new CartUpdateQueue();

// State manager for bulk operations
const bulkOperationState = {
  isProcessing: false,
  activeOperation: null // 'allow' or 'disallow' or null
};

function asyncCartChange(formData) {
  return fetch(window.Shopify.routes.root + 'cart/change.js', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(formData)
  })
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
  })
  .catch((error) => {
    console.error('Error updating cart:', error);
    throw error;
  });
}

function disableButton(button) {
  if (!button) return;
  button.disabled = true;
  button.setAttribute('aria-disabled', 'true');
  button.dataset.initialText = button.textContent;
  button.textContent = "Updating...";
}

function enableButton(button) {
  if (!button) return;
  button.disabled = false;
  button.setAttribute('aria-disabled', 'false');
  button.textContent = button.dataset.initialText || button.textContent;
}

function disableAllControls() {
  // Disable all checkboxes
  document.querySelectorAll('input.allow_substitutions').forEach(checkbox => {
    checkbox.disabled = true;
  });
  
  // Disable all buttons
  disableButton(document.querySelector('button[name="checkout"]'));
  disableButton(document.querySelector('.subs_control > button#allow_all'));
  disableButton(document.querySelector('.subs_control > button#disallow_all'));
}

function enableAllControls() {
  // Enable all checkboxes if not in bulk operation
  if (!bulkOperationState.isProcessing) {
    document.querySelectorAll('input.allow_substitutions').forEach(checkbox => {
      checkbox.disabled = false;
    });
  }
  
  // Enable all buttons
  enableButton(document.querySelector('button[name="checkout"]'));
  enableButton(document.querySelector('.subs_control > button#allow_all'));
  enableButton(document.querySelector('.subs_control > button#disallow_all'));
}

async function updateSingleSubstitution(element, substitutionValue) {
  const lineKey = element.dataset.key;
  const line = element.dataset.line;
  
  // Prevent duplicate updates
  if (cartUpdateQueue.isPending(lineKey)) {
    console.log(`Update already pending for line ${line}`);
    return;
  }
  
  cartUpdateQueue.addPending(lineKey);
  
  try {
    const formData = buildFormData(element, substitutionValue);
    await cartUpdateQueue.add(() => asyncCartChange(formData));
    
    // Update checkbox state after successful update
    element.checked = substitutionValue === 'Yes';
  } catch (error) {
    console.error(`Failed to update line ${line}:`, error);
    // Revert checkbox on error
    element.checked = substitutionValue !== 'Yes';
    throw error;
  } finally {
    cartUpdateQueue.removePending(lineKey);
  }
}

async function handleSubstitutionButtonClick(elements, checkoutButton, actionButton, actionType) {
  console.log(`${actionType} button clicked`);
  
  // Prevent multiple simultaneous bulk operations
  if (bulkOperationState.isProcessing) {
    console.log('Bulk operation already in progress');
    return;
  }
  
  bulkOperationState.isProcessing = true;
  bulkOperationState.activeOperation = actionType;
  
  // Disable all controls
  disableAllControls();
  
  // Determine the check state based on actionType
  const shouldCheck = actionType === 'allow';
  const substitutionValue = shouldCheck ? 'Yes' : 'No';
  
  // Collect all items that need updating
  const itemsToUpdate = Array.from(elements).filter(element => {
    const isChecked = element.checked;
    return (shouldCheck && !isChecked) || (!shouldCheck && isChecked);
  });
  
  console.log(`Updating ${itemsToUpdate.length} items`);
  
  try {
    // Update all items
    for (let i = 0; i < itemsToUpdate.length; i++) {
      const element = itemsToUpdate[i];
      console.log(`Updating item ${i + 1} of ${itemsToUpdate.length}`);
      
      try {
        await updateSingleSubstitution(element, substitutionValue);
      } catch (error) {
        console.error(`Failed to update item ${i + 1}:`, error);
        // Continue with other items even if one fails
      }
    }
    
    console.log('Bulk operation completed');
  } finally {
    bulkOperationState.isProcessing = false;
    bulkOperationState.activeOperation = null;
    
    // Re-enable controls
    enableAllControls();
  }
}

function buildFormData(element, substitutionValue) {
  const line = element.dataset.line;
  const quantityInput = element.closest('.line-item.line-item--stack').querySelector('input.quantity-selector__value');
  const quantity = quantityInput ? quantityInput.value : '1';
  
  return {
    'line': line,
    'quantity': quantity,
    'properties': { 'Allow Substitutions': substitutionValue }
  };
}

// Prevent checkout during pending updates
function interceptCheckout(event) {
  if (cartUpdateQueue.hasPendingUpdates() || bulkOperationState.isProcessing) {
    event.preventDefault();
    alert('Please wait for all updates to complete before checking out.');
    return false;
  }
  return true;
}

// Start the whole thing and re-attach event listeners when the section is re-rendered
document.addEventListener('DOMContentLoaded', function() {
  let elements, checkoutButton, allowAllButton, disallowAllButton, checkoutForm;

  function initEventListeners() {
    elements = Array.from(document.querySelectorAll('input.allow_substitutions'));
    checkoutButton = document.querySelector('button[name="checkout"]');
    allowAllButton = document.querySelector('.subs_control > button#allow_all');
    disallowAllButton = document.querySelector('.subs_control > button#disallow_all');
    checkoutForm = document.getElementById('cart_submit_form');

    // Remove existing listeners to prevent duplicates
    elements.forEach((element) => {
      element.removeEventListener('change', handleCheckboxChange);
    });

    // Add checkbox change listeners
    elements.forEach((element) => {
      element.addEventListener('change', handleCheckboxChange);
    });

    // Function to handle individual checkbox changes
    async function handleCheckboxChange(event) {
      // Prevent changes during bulk operations
      if (bulkOperationState.isProcessing) {
        event.preventDefault();
        event.target.checked = !event.target.checked;
        console.log('Cannot change during bulk operation');
        return;
      }
      
      const element = event.target;
      const allowSubs = element.checked ? 'Yes' : 'No';
      
      // Disable the specific checkbox during update
      element.disabled = true;
      
      try {
        await updateSingleSubstitution(element, allowSubs);
      } catch (error) {
        // Revert on error
        element.checked = !element.checked;
        alert('Failed to update substitution preference. Please try again.');
      } finally {
        // Re-enable checkbox if not in bulk operation
        if (!bulkOperationState.isProcessing) {
          element.disabled = false;
        }
      }
    }

    // Add checkout form interceptor
    if (checkoutForm) {
      checkoutForm.removeEventListener('submit', interceptCheckout);
      checkoutForm.addEventListener('submit', interceptCheckout, { capture: true });
    }

    // Add bulk operation button listeners
    if (allowAllButton) {
      allowAllButton.removeEventListener('click', allowAllHandler);
      allowAllButton.addEventListener('click', allowAllHandler);
    }

    if (disallowAllButton) {
      disallowAllButton.removeEventListener('click', disallowAllHandler);
      disallowAllButton.addEventListener('click', disallowAllHandler);
    }
  }

  const allowAllHandler = () => handleSubstitutionButtonClick(elements, checkoutButton, allowAllButton, 'allow');
  const disallowAllHandler = () => handleSubstitutionButtonClick(elements, checkoutButton, disallowAllButton, 'disallow');

  initEventListeners();

  // Watch for cart section updates
  const cartSection = document.querySelector('#main .shopify-section');
  const config = { childList: true, subtree: true };

  const observer = new MutationObserver((mutationsList) => {
    for (const mutation of mutationsList) {
      if (mutation.type === 'childList') {
        // Debounce re-initialization to avoid multiple calls
        clearTimeout(window.reinitTimeout);
        window.reinitTimeout = setTimeout(() => {
          initEventListeners();
        }, 100);
      }
    }
  });

  if (cartSection) {
    observer.observe(cartSection, config);
  }
});
</script>

{% schema %}
{
  "name": "Cart",
  "max_blocks": 3,
  "settings": [
    {
      "type": "paragraph",
      "content": "Those settings are only applicable when the cart contains at least one product."
    },
    {
      "type": "checkbox",
      "id": "enable_order_notes",
      "label": "Enable order notes",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_payment_icons",
      "label": "Show payment icons",
      "default": true
    },
    {
      "type": "header",
      "content": "Gift wrap"
    },
    {
      "type": "paragraph",
      "content": "Gift wrap needs to be set up as a product. [Read more](https://support.maestrooo.com/article/190-cart-set-up-a-gift-wrap-product)"
    },
    {
      "type": "product",
      "id": "gift_wrap_product",
      "label": "Product"
    },
    {
      "type": "text",
      "id": "gift_wrap_text",
      "label": "Text",
      "default": "Do you want a gift wrap?"
    },
    {
      "type": "text",
      "id": "gift_wrap_button",
      "label": "Button",
      "default": "Add a gift wrap"
    },
    {
      "type": "header",
      "content": "Shipping estimator"
    },
    {
      "type": "checkbox",
      "id": "show_shipping_estimator",
      "label": "Show shipping rates calculator",
      "default": true
    },
    {
      "type": "text",
      "id": "shipping_estimator_default_country",
      "label": "Default country",
      "info": "If the customer is logged in, the country of their shipping address will be used.",
      "default": "United States"
    },
    {
      "type": "text",
      "id": "trust_heading",
      "label": "Heading",
      "default": "Our guarantees"
    },
    {
      "type": "header",
      "content": "Upsell"
    },
    {
      "type": "paragraph",
      "content": "Show additional products to encourage customers to buy more."
    },
    {
      "type": "text",
      "id": "upsell_heading",
      "label": "Heading",
      "default": "Complete your cart"
    },
    {
      "type": "collection",
      "id": "upsell_collection",
      "label": "Collection",
      "info": "Products already in cart or sold out will be hidden."
    },
    {
      "type": "range",
      "id": "upsell_products_count",
      "label": "Products to show",
      "min": 4,
      "max": 12,
      "step": 4,
      "default": 4
    }
  ],
  "blocks": [
    {
      "name": "Trust text",
      "type": "trust",
      "settings": [
        {
          "type": "select",
          "id": "icon",
          "label": "Icon",
          "options": [
            {
              "value": "bi-add-to-cart",
              "label": "Add to cart",
              "group": "Shop"
            },
            {
              "value": "bi-gift-wrap",
              "label": "Gift wrap",
              "group": "Shop"
            },
            {
              "value": "bi-gift-box",
              "label": "Gift box",
              "group": "Shop"
            },
            {
              "value": "bi-heart",
              "label": "Heart",
              "group": "Shop"
            },
            {
              "value": "bi-ecology",
              "label": "Ecology",
              "group": "Shop"
            },
            {
              "value": "bi-plant",
              "label": "Plant",
              "group": "Shop"
            },
            {
              "value": "bi-shop",
              "label": "Shop",
              "group": "Shop"
            },
            {
              "value": "bi-shop-pin",
              "label": "Shop with pin",
              "group": "Shop"
            },
            {
              "value": "bi-alert",
              "label": "Alert",
              "group": "Communication"
            },
            {
              "value": "bi-chat",
              "label": "Chat",
              "group": "Communication"
            },
            {
              "value": "bi-comment",
              "label": "Comment",
              "group": "Communication"
            },
            {
              "value": "bi-customer-support",
              "label": "Customer support",
              "group": "Communication"
            },
            {
              "value": "bi-email",
              "label": "Email",
              "group": "Communication"
            },
            {
              "value": "bi-network",
              "label": "Network",
              "group": "Communication"
            },
            {
              "value": "bi-newsletter",
              "label": "Newsletter",
              "group": "Communication"
            },
            {
              "value": "bi-love",
              "label": "Love",
              "group": "Communication"
            },
            {
              "value": "bi-phone",
              "label": "Phone",
              "group": "Communication"
            },
            {
              "value": "bi-share",
              "label": "Share",
              "group": "Communication"
            },
            {
              "value": "bi-delivery",
              "label": "Delivery",
              "group": "Delivery"
            },
            {
              "value": "bi-fast-delivery",
              "label": "Fast delivery",
              "group": "Delivery"
            },
            {
              "value": "bi-returns",
              "label": "Returns",
              "group": "Delivery"
            },
            {
              "value": "bi-time",
              "label": "Time",
              "group": "Delivery"
            },
            {
              "value": "bi-secure-payment",
              "label": "Secure payment",
              "group": "Security"
            },
            {
              "value": "bi-mobile-payment",
              "label": "Mobile payment",
              "group": "Security"
            },
            {
              "value": "bi-credit-card",
              "label": "Credit card",
              "group": "Security"
            },
            {
              "value": "bi-shield",
              "label": "Shield",
              "group": "Security"
            }
          ],
          "default": "bi-customer-support"
        },
        {
          "type": "image_picker",
          "id": "custom_icon",
          "label": "Custom icon",
          "info": "60 x 60px .png with transparency recommended"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Heading",
          "default": "Your title"
        },
        {
          "type": "richtext",
          "id": "content",
          "label": "Content",
          "default": "<p>Short content about your store</p>"
        }
      ]
    }
  ]
}
{% endschema %}